name: Java CI with Gradle

on:
  push:
    branches: [ "release" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0
    - name: Build with Gradle Wrapper
      run: ./gradlew build -x test  # 테스트를 건너뜁니다.

    # Docker 이미지 빌드
    - name: Build Docker Image
      run: |
        docker build -t my-app:latest .

    # Docker 이미지 아카이브
    - name: Save Docker Image as tar
      run: |
        docker save my-app:latest -o my-app.tar

    # 아카이브 파일을 아티팩트로 업로드 (v3로 업데이트)
    - name: Upload Docker Image as Artifact
      uses: actions/upload-artifact@v3
      with:
        name: my-app-image
        path: my-app.tar

  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > ssh_key.pem
          chmod 600 ssh_key.pem

      # EC2에 SSH로 접속하여 배포
      - name: Deploy to EC2
        run: |
          # Docker 이미지 아카이브를 EC2로 전송
          scp -o StrictHostKeyChecking=no -i ssh_key.pem my-app.tar ec2-user@ec2-54-180-236-111.ap-northeast-2.compute.amazonaws.com:~/
          
          # EC2에 SSH로 접속하여 Docker 이미지 로드 및 실행
          ssh -o StrictHostKeyChecking=no -i ssh_key.pem ec2-user@ec2-54-180-236-111.ap-northeast-2.compute.amazonaws.com << 'EOF'
            docker load -i my-app.tar
            docker run -d -p 80:8080 my-app:latest
          EOF
