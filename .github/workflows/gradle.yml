name: Java CI with Gradle

on:
  push:
    branches: [ "release" ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582
      - name: Build with Gradle Wrapper
        run: ./gradlew build -x test

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-docker-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-docker

      - name: Build Docker Image
        run: |
          docker build -t my-app:${{ github.sha }} .

      - name: Save Docker Image as tar
        run: |
          docker save my-app:${{ github.sha }} -o my-app.tar

      - name: Upload Docker Image as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: my-app-image
          path: my-app.tar

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up SSH key
        run: |
          echo "${{ secrets.EC2_SSH_KEY }}" > ssh_key.pem
          chmod 600 ssh_key.pem

      - name: Download Docker Image Artifact
        uses: actions/download-artifact@v3
        with:
          name: my-app-image
          path: .

      - name: Deploy to EC2
        run: |
          # Docker 이미지 아카이브를 EC2로 전송
          scp -o StrictHostKeyChecking=no -i ssh_key.pem my-app.tar ec2-user@ec2-54-180-236-111.ap-northeast-2.compute.amazonaws.com:~/
          
          # EC2에 SSH로 접속하여 Docker 이미지 로드 및 실행
          ssh -o StrictHostKeyChecking=no -i ssh_key.pem ec2-user@ec2-54-180-236-111.ap-northeast-2.compute.amazonaws.com << 'EOF'
            set -e  # 오류 발생 시 중단
            # 기존 컨테이너 중지 및 제거
            if [ "$(docker ps -q -f name=my-app)" ]; then
              docker stop my-app
              docker rm my-app
            fi
            # Docker 이미지 로드 및 실행
            docker load -i my-app.tar
            docker run -d --name my-app -p 80:8080 --env SPRING_PROFILES_ACTIVE=prod my-app:${{ github.sha }}
          EOF

      - name: Cleanup
        run: |
          rm -f ssh_key.pem